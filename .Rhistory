}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
returnlist <- list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
return(returnlist)
}
## cacheSolve is a wrapper for solve() that takes the caching tools and data from makeCacheMatrix as input,
##  checks whether the inverse of the matrix is already cached and - only if necessary -
##  computes and stores it and then returns the inverse
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("retrieving inverse from cache")
return(inv)
}
cachedmatrix <- x$get()
inv <- solve(cachedmatrix, ...)
x$setinverse(inv)
return(inv)
}
## Example
thematrix <- matrix(rexp(64, rate=1), ncol=8)
thechachedmatrix <- makeCacheMatrix(thematrix)
cacheSolve(thechachedmatrix)
cacheSolve(thechachedmatrix)
## Put comments here that give an overall description of what your
## functions do
## creates a special "matrix" object that can cache its inverse
## 1. sets the value of the matrix
## 2. gets the value of the matrix
## 3. sets teh value of the inverse
## 4. gets the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
INVERSE <- NULL
set <- function(y) {
x <<- y
INVERSE <<- NULL
}
get <- function() x
setinverse <- function(solve) INVERSE <<- solve
getinverse <- function() INVERSE
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## calculates the inverse of the special "matrix" created with the above function
##first, checks to see if the inverse has already been calculated
## if so, gets the inverse from the cache and skips the calculation
## otherwise, it calculates the inverse of the data and sets the value of the mean
## in the cache via the setinverse function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
INVERSE <- x$getinverse()
if(!is.null(INVERSE)) {
message("getting cached data")
return(INVERSE)
}
MATRIX <- x$get()
INVERSE <- solve(MATRIX, ...)
x$setinverse(INVERSE)
INVERSE
}
thematrix <- matrix(rexp(64, rate=1), ncol=8)
thechachedmatrix <- makeCacheMatrix(thematrix)
cacheSolve(thechachedmatrix)
cacheSolve(thechachedmatrix)
install.packages(c("XML", "jsonlite"))
chicago <- readRDS("chigago.rds")
rnorm(6)
letters(1:6)
letters
letters[1:6]
testdf <- data.frame(one=rnorm(6), two=rnorm(6), three=rnorm(6), four=letters[1:6])
testdf
library(dplyr)
install.packages("dplyr")
library(dplyr)
select(testdf, one:two)
filter(testdf, four=="a")
install.packages("lattice")
xyplot
?bowplot
?bwplot
library(lattice)
?bwplot
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?transform
###############################################################
## Reproducible Research - Homework assignment script1        #
##                                                            #
## ToDo: #
## Author: DatatrainR                                         #
###############################################################
#### PLEASE SET YOUR WORKING DIRECTORY HERE ####
setwd("E:/Lukas/Coursera/Data Specialization/RepResearch/RepData_PeerAssessment1/")
#################
#### SETUP   ####
#################
#Load packages
require(data.table)
#require(ggplot2)
#require(plyr)
# unzip data in wd
coursedata <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url = coursedata, destfile = "zippeddata.zip", method = "auto")
unzip("zippeddata.zip")
# read .csv and turn into data.table
activitydat <- read.csv("activity.csv")
activitytable <- data.table(activitydat)
activitytable
summary(activitytable[,steps])
head(activitytable)
?aggregate
aggregate(activitytable, by=steps, mean)
aggregate(activitytable, by=activitytable[,steps], mean)
aggregate(activitytable, by=list(activitytable[,steps]), mean)
activitytable
aggregate(activitytable, by=list(activitytable[,date]), mean)
warnings)
warnings())
warnings()
aggregate(activitytable, by=list(activitytable[,date]), mean)
aggregate(activitytable[,steps], by=list(activitytable[,date]), mean)
stepspday <- aggregate(activitytable[,steps], by=list(activitytable[,date]), sum)
stepspday
require(ggplot2)
qplot(stepspday, geom="histogram")
class(stepspday)
?aggregate
stepspday <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,date]), sum), list(steps, date))
stepspday <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,date]), sum), list("steps", "date"))
stepspday
qplot(stepspday[,"steps"], geom="histogram")
stepspday[,"steps"]
stepspday <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,date]), sum), list("date", "steps"))
qplot(stepspday[,"steps"], geom="histogram")
stepspday[,"steps"]
stepspday <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,date]), sum), list("date", "steps"))
stepspday
qplot(stepspday[,"steps"], geom="histogram")
ggplot(data=stepspday, aes(x=date, y=steps))
ggplot(data=stepspday, aes(stepspday[,"steps"])) +
geom_histogram(col="red",
aes(fill=..count..))
qplot(stepspday[,"steps"], geom="histogram")
hist(stepspday$steps)
qplot(stepspday[,"steps"], geom="histogram",
ylab("Frequency") + xlab('Steps'))
qplot(stepspday[,"steps"], geom="histogram") +
ylab("Frequency") + xlab('Steps')
qplot(stepspday[,"steps"], geom="histogram") +
ylab("Frequency") + xlab('Steps')+
ggtitle('Histogram of total number of steps per day')
summary(stepspday)
summary(stepspday$steps)
stepspinterval <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,interval]), sum), list("interval", "steps"))
stepspinterval
?aggregate
stepspinterval <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,interval]), FUN = mean, na.action = na.omit), list("interval", "steps"))
stepspinterval
activitytable[,steps]
activitydat
activitytable[,steps]
?mean
stepspinterval <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,interval]), FUN = mean, na.rm = TRUE), list("interval", "steps"))
stepspinterval
ggplot(stepspinterval, aes(interval, steps)) + geom_line() +
xlab("5 minute intervals") + ylab("")
ggplot(stepspinterval, aes(interval, steps)) + geom_line() +
xlab("5 minute intervals") +
ggtitle('Average number of steps per interval')
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
ggplot(stepspinterval, aes(interval, steps)) + geom_line() +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
max(stepspinterval$steps)
which.max(stepspinterval$steps)
stepsinterval$interval[which.max(stepspinterval$steps)]
stepspinterval$interval[which.max(stepspinterval$steps)]
activitysummary <- summary(activitytable[,steps])
activitysummary
activitytable
str(activitysummary)
activitysummary[,7]
activitysummary[7]
activitytable[, stepsfilled := steps]
activitytable
seq_along(stepspinterval$interval)
activitytable[, stepsfilled==NA]
activitytable
activitytable[, stepsfilled := steps]
activitytable
seq_along(activitytable[,steps])
?set
for (i in seq_along(activitytable[,stepsfilled])){
set(activitytable[,stepsfilled], i=which(is.na(activitytable[,stepsfilled][[i]])), j=i, value=0)
}
1:nrow(activitytable)
activitytable[, stepsfilled][is.na(activitytable[, stepsfilled])]
activitytable[, stepsfilled][is.na(activitytable[, stepsfilled]
)
]
activitytable[, stepsfilled[is.na(stepsfilled)] :=13]
activitytable[, stepsfilled := steps]
activitytable
activitytable[, stepsfilled[is.na(stepsfilled)]=13]
for(i in 1:nrow(activitytable)){
if (activitytable$stepsfilled[i]==NA){
activitytable$stepsfilled[i]=0
}
}
for(i in 1:nrow(activitytable)){
if (is.na(activitytable$stepsfilled[i])==TRUE){
activitytable$stepsfilled[i]=0
}
}
activitytable
activitytable[, stepsfilled := steps]
?which
for(i in 1:nrow(activitytable)){
if (is.na(activitytable$stepsfilled[i])==TRUE){
activitytable$stepsfilled[i]=stepspinterval$steps[which(stepspinterval$interval==activitytable$interval[i])]
}
}
activitytable
stepspday_filled <- setNames(aggregate(activitytable[,stepsfilled], by=list(activitytable[,date]), sum), list("date", "stepsfilled"))
qplot(stepspday_filled[,"stepsfilled"], geom="histogram") +
ylab("Frequency") + xlab('Steps')+
ggtitle('Histogram of total number of steps per day (NA replaced by mean of 5 minute interval)')
qplot(stepspday[,"steps"], geom="histogram") +
ylab("Frequency") + xlab('Steps')+
ggtitle('Histogram of total number of steps per day')
summary(activitytable$stepsfilled)
summary(stepspday_filled)
summary(stepspday_filled$stepsfilled)
activitysummary[7]
summary(stepspday$steps)
summary(stepspday_filled$stepsfilled)
weekdays(activitytable[,date])
activitytable[,date]
?weekdays
###############################################################
## Reproducible Research - Homework assignment script1        #
##                                                            #
## ToDo: #
## Author: DatatrainR                                         #
###############################################################
#### PLEASE SET YOUR WORKING DIRECTORY HERE ####
setwd("E:/Lukas/Coursera/Data Specialization/RepResearch/RepData_PeerAssessment1/")
#################
#### SETUP   ####
#################
#Load packages
require(data.table)
require(ggplot2)
#require(plyr)
# unzip data in wd
coursedata <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url = coursedata, destfile = "zippeddata.zip", method = "auto")
unzip("zippeddata.zip")
# read .csv and turn into data.table
activitydat <- read.csv("activity.csv")
activitytable <- data.table(activitydat)
#Turn dates into dates
activitytable[, dates := format(date, format="%Y-%m-%d")]
###############################################################
## Reproducible Research - Homework assignment script1        #
##                                                            #
## ToDo: #
## Author: DatatrainR                                         #
###############################################################
#### PLEASE SET YOUR WORKING DIRECTORY HERE ####
setwd("E:/Lukas/Coursera/Data Specialization/RepResearch/RepData_PeerAssessment1/")
#################
#### SETUP   ####
#################
#Load packages
require(data.table)
require(ggplot2)
#require(plyr)
# unzip data in wd
coursedata <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url = coursedata, destfile = "zippeddata.zip", method = "auto")
unzip("zippeddata.zip")
# read .csv and turn into data.table
activitydat <- read.csv("activity.csv")
activitytable <- data.table(activitydat)
#Turn dates into dates
activitytable[, dates := format(date, format="%Y-%m-%d")]
activitytable
#Summary statistics
activitysummary <- summary(activitytable[,steps])
##Aggregating using "sum" over dates yields steps per day
stepspday <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,date]), sum), list("date", "steps"))
qplot(stepspday[,"steps"], geom="histogram") +
ylab("Frequency") + xlab('Steps')+
ggtitle('Histogram of total number of steps per day')
#summary statistics of total number of steps per day
summary(stepspday$steps)
##Aggregating 5 minute intervals over all days
stepspinterval <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,interval]), FUN = mean, na.rm = TRUE), list("interval", "steps"))
ggplot(stepspinterval, aes(interval, steps)) + geom_line() +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
#the most steps are taken (on average) in this interval
moststeps <- stepspinterval$interval[which.max(stepspinterval$steps)]
## Fill NAs
#there's so many NAs:
activitysummary[7]
#filling these NAs with the mean for the respective 5 minute interval
activitytable[, stepsfilled := steps]
for(i in 1:nrow(activitytable)){
if (is.na(activitytable$stepsfilled[i])==TRUE){
activitytable$stepsfilled[i]=stepspinterval$steps[which(stepspinterval$interval==activitytable$interval[i])]
}
}
stepspday_filled <- setNames(aggregate(activitytable[,stepsfilled], by=list(activitytable[,date]), sum), list("date", "stepsfilled"))
qplot(stepspday_filled[,"stepsfilled"], geom="histogram") +
ylab("Frequency") + xlab('Steps')+
ggtitle('Histogram of total number of steps per day (NA replaced by mean of 5 minute interval)')
summary(stepspday_filled$stepsfilled)
activitytable[, date := format(date, format="%Y-%m-%d")]
weekdays(activitytable$date)
?weekdays
###############################################################
## Reproducible Research - Homework assignment script1        #
##                                                            #
## ToDo: #
## Author: DatatrainR                                         #
###############################################################
#### PLEASE SET YOUR WORKING DIRECTORY HERE ####
setwd("E:/Lukas/Coursera/Data Specialization/RepResearch/RepData_PeerAssessment1/")
#################
#### SETUP   ####
#################
#Load packages
require(data.table)
require(ggplot2)
#require(plyr)
# unzip data in wd
coursedata <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url = coursedata, destfile = "zippeddata.zip", method = "auto")
unzip("zippeddata.zip")
# read .csv and turn into data.table
activitydat <- read.csv("activity.csv")
activitytable <- data.table(activitydat)
#Turn dates into dates
activitytable[, date := as.Date(date, format="%Y-%m-%d")]
weekdays(activitytable$date)
activitytable[, weekend := weekdays(date)%in% c("Samstag", "Sonntag")]
activitytable
activitytable$weekend
sum(activitytable$weekend)
activitytable[,steps[weekend==TRUE]]
stepspinterval_we <- setNames(aggregate(activitytable[,stepsfilled[weekend==TRUE]], by=list(activitytable[,interval][weekend==TRUE]), FUN = mean), list("interval", "steps"))
###############################################################
## Reproducible Research - Homework assignment script1        #
##                                                            #
## ToDo: #
## Author: DatatrainR                                         #
###############################################################
#### PLEASE SET YOUR WORKING DIRECTORY HERE ####
setwd("E:/Lukas/Coursera/Data Specialization/RepResearch/RepData_PeerAssessment1/")
#################
#### SETUP   ####
#################
#Load packages
require(data.table)
require(ggplot2)
#require(plyr)
# unzip data in wd
coursedata <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url = coursedata, destfile = "zippeddata.zip", method = "auto")
unzip("zippeddata.zip")
# read .csv and turn into data.table
activitydat <- read.csv("activity.csv")
activitytable <- data.table(activitydat)
#Turn dates into dates
activitytable[, date := as.Date(date, format="%Y-%m-%d")]
#Summary statistics
activitysummary <- summary(activitytable[,steps])
##Aggregating using "sum" over dates yields steps per day
stepspday <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,date]), sum), list("date", "steps"))
qplot(stepspday[,"steps"], geom="histogram") +
ylab("Frequency") + xlab('Steps')+
ggtitle('Histogram of total number of steps per day')
#summary statistics of total number of steps per day
summary(stepspday$steps)
##Aggregating 5 minute intervals over all days
stepspinterval <- setNames(aggregate(activitytable[,steps], by=list(activitytable[,interval]), FUN = mean, na.rm = TRUE), list("interval", "steps"))
ggplot(stepspinterval, aes(interval, steps)) + geom_line() +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
#the most steps are taken (on average) in this interval
moststeps <- stepspinterval$interval[which.max(stepspinterval$steps)]
## Fill NAs
#there's so many NAs:
activitysummary[7]
#filling these NAs with the mean for the respective 5 minute interval
activitytable[, stepsfilled := steps]
for(i in 1:nrow(activitytable)){
if (is.na(activitytable$stepsfilled[i])==TRUE){
activitytable$stepsfilled[i]=stepspinterval$steps[which(stepspinterval$interval==activitytable$interval[i])]
}
}
stepspday_filled <- setNames(aggregate(activitytable[,stepsfilled], by=list(activitytable[,date]), sum), list("date", "stepsfilled"))
qplot(stepspday_filled[,"stepsfilled"], geom="histogram") +
ylab("Frequency") + xlab('Steps')+
ggtitle('Histogram of total number of steps per day (NA replaced by mean of 5 minute interval)')
summary(stepspday_filled$stepsfilled)
activitytable[, weekend := weekdays(date)%in% c("Samstag", "Sonntag")]
stepspinterval_we <- setNames(aggregate(activitytable[,stepsfilled[weekend==TRUE]], by=list(activitytable[,interval][weekend==TRUE]), FUN = mean), list("interval", "steps"))
weekend
stepspinterval_we <- setNames(aggregate(activitytable[,stepsfilled[weekend==TRUE]], by=list(activitytable[,interval[weekend==TRUE]]), FUN = mean), list("interval", "steps"))
stepspinterval_we
activitytable[,interval[weekend==FALSE]]
stepspinterval_wd
stepspinterval_we
stepspinterval_wd <- setNames(aggregate(activitytable[,stepsfilled[weekend==FALSE]], by=list(activitytable[,interval[weekend==FALSE]]), FUN = mean), list("interval", "steps"))
stepspinterval_wd
stepspinterval$we <- setNames(aggregate(activitytable[,stepsfilled[weekend==TRUE]], by=list(activitytable[,interval[weekend==TRUE]]), FUN = mean), list("interval", "steps"))
stepspinterval$wd <- setNames(aggregate(activitytable[,stepsfilled[weekend==FALSE]], by=list(activitytable[,interval[weekend==FALSE]]), FUN = mean), list("interval", "steps"))
stepspinterval
stepspinterval2 <- setNames(aggregate(activitytable[,stepsfilled], by=list(activitytable[,interval],activitytable[,weekend]), FUN = mean), list("interval", "steps"))
stepspinterval2
activitytable[, weekend := factor(weekend, c("Weekday", "Weekend"))]
activitytable
activitytable[, weekend := weekdays(date)%in% c("Samstag", "Sonntag")]
stepspinterval2 <- setNames(aggregate(activitytable[,stepsfilled], by=list(activitytable[,interval],activitytable[,weekend]), FUN = mean), list("interval", "steps"))
ggplot(stepspinterval, aes(interval, steps)) + geom_line() +
facet_wrap(~weekend) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(~weekend) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
stepspinterval2 <- setNames(aggregate(activitytable[,stepsfilled], by=list(activitytable[,interval],activitytable[,weekend]), FUN = mean), list("interval", "weekend","steps"))
stepspinterval2
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(~weekend) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(weekend~) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(weekend~.) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(~weekend, ncol = 1) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
activitytable[, interval := as.POSIXct(interval, format="%H%M")]
?as.POSIXct
?format
?as.POSIXct
activitytable[, interval := as.POSIXlt(interval, format="%H%M")]
activitytable[, interval]
format(activitytable[, interval], "%H%M")
as.POSIXct(activitytable[, interval], format="%H%M")
summary(stepspday$steps)
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(~weekend, ncol = 1) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
#plot
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(~weekend, ncol = 1, labeller=list(FALSE="Weekday",TRUE="Weekend")) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_grid(.~weekend, labeller=list(FALSE="Weekday",TRUE="Weekend")) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_grid(.~weekend, labeller=list("FALSE"="Weekday","TRUE"="Weekend")) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
#specify weekdays/ends
activitytable[, weekend := weekdays(date)%in% c("Samstag", "Sonntag")]
activitytable[, weekend := factor(activitytable$weekend, labels=c("No", "Yes"))]
activitytable
activitytable[, weekend := factor(activitytable$weekend, labels=c("Weekday", "Weekend"))]
activitytable
#aggregate steps for each time interval by weekday/weekend argument
stepspinterval2 <- setNames(aggregate(activitytable[,stepsfilled], by=list(activitytable[,interval],activitytable[,weekend]), FUN = mean), list("interval", "weekend","steps"))
#plot
ggplot(stepspinterval2, aes(interval, steps)) + geom_line() +
facet_wrap(~weekend, ncol = 1) +
xlab("5 minute intervals") + ylab("") +
ggtitle('Average number of steps per interval')
